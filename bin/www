#!/usr/bin/env node

const chalk = require('chalk');
const debug = require('debug')('locator:server');
const http = require('http');

const app = require('../app');
const config = require('../config');

/**
 * Get port from environment and store in Express.
 */
app.set('port', config.port);

// Create HTTP server
const server = http.createServer(app);

Promise
  .resolve()
  .then(startServer)
  .then(onListening)
  .catch(handleError)
  .catch(err => {
    console.error(chalk.red(err.stack));
    process.exit(1);
  });

/**
 * Listen on provided port, on all network interfaces.
 */
function startServer() {
  return new Promise((resolve, reject) => {
    server.listen(config.port);
    server.on('error', reject);
    server.on('listening', resolve);
  });
}

/**
 * Event listener for HTTP server "error" event.
 */
function handleError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      throw new Error(`Port ${config.port} requires elevated privileges`);
    case 'EADDRINUSE':
      throw new Error(`Port ${config.port} is already in use`);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  debug(`Listening on port ${config.port}`);
}
